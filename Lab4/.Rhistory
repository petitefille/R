install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
library("fGarch")
library("rugarch")
plot.sigt = function(y,sigt,model){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
lines(sigt,col=2)
lines(-sigt,col=2)
title(model)
}
fit.tsgarch = garchFit(~garch(1,1), delta = 1, data = Y, trace = F, include.mean = F )
library("fGarch")
library("rugarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("rugarch")
library("fGarch")
library("rugarch")
plot.sigt = function(y,sigt,model){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
lines(sigt,col=2)
lines(-sigt,col=2)
title(model)
}
fit.tsgarch = garchFit(~garch(1,1), delta = 1, data = Y, trace = F, include.mean = F )
# Title:
res=Y/fit.tsgarch@sigma.t
qqnorm(res)
qqline(res, col = "red")
plot.sigt(Y,fit.tsgarch@sigma.t,"Taylor-Schwert-GARCH(1,1)")
garch = garchFit(~garch(1,1),data=Y, include.mean = FALSE)
summary(garch)
plot(garch)
tsgarch = garchFit(~garch(1,1), delta = 1, data = Y, trace = F, include.mean = F )
summary(tsgarch)
plot(tgarch)
plot(tsgarch)
summary(tsgarch)
res=Y/tsgarch@sigma.t
qqnorm(res)
qqline(res, col = "red")
install.package(rugarch)
install.package("rugarch")
install.packages("rugarch")
library(rugarch)
spec = ugarchspec(variance.model = list(model="eGarch", mean.model = list(armaOder = c(0,0)))
)
spec = ugarchspec(variance.model = list(model="eGarch"), mean.model = list(armaOder = c(0,0)))
spec = ugarchspec(variance.model = list(model="eGARCH"), mean.model = list(armaOder = c(0,0)))
fit = ugarchfit(data=Y,spec=spec)
egarch.sigma.t = as.vector(sigma(fit)[,1])
summary(fit)
fit
library(tseries)
source("FTSe.R")
n=length(FTSE) # 2000
X=log(FTSE[(n+1-1000):n]/FTSE[(n-1000):(n-1)]) # last 1000 log returns
# (length(X) = 1000)
# we estimate mu by the sample mean of the 1000 most recent log returns (X)
mu=mean(X) # -8.009957e-05
# Xt = mu + Yt => Yt = Xt - mu
Y=X-mu
#
# we fit the GARCH(1,1) model to Yt
out.garch11=garch(Y,order=c(1,1))
# ***** ESTIMATION WITH ANALYTICAL GRADIENT *****
#   I     INITIAL X(I)        D(I)
# 1     2.287772e-04     1.000e+00
# 2     5.000000e-02     1.000e+00
# 3     5.000000e-02     1.000e+00
# ...
# ***** RELATIVE FUNCTION CONVERGENCE *****
# FUNCTION    -3.841232e+03   RELDX        3.945e-06
# FUNC. EVALS      69         GRAD. EVALS      30
# PRELDF       2.772e-11      NPRELDF      2.772e-11
# I      FINAL X(I)        D(I)          G(I)
# 1    2.478413e-06     1.000e+00     3.521e+02
# 2    1.271763e-01     1.000e+00     1.038e-03
# 3    8.694462e-01     1.000e+00    -5.887e-03
omega = out.garch11$coef[1] # 2.478413e-06
alpha1 = out.garch11$coef[2] # 0.1271763
beta1 = out.garch11$coef[3]  # 0.8694462
res=Y/out.garch11$fitted[,1]
qqnorm(res)
qqline(res, col = "red")
sigsq = omega + alpha1*(Y[1000]^2) + beta1*(out.garch11$fitted[1000,1]^2)
# 8.346525e-05
alpha = c(0.1,0.01)
x_alpha = qnorm(alpha) # alpha quantile of standard normal distribution
VaR = 1000*(1 - exp(mu + x_alpha*sqrt(sigsq)))
VaR
install.packages("tseries")
library(tseries)
install.packages("tseries")
library("tseries")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("rugarch")
install.packages("rugarch")
library("fGarch")
library("rugarch")
install.packages("fGarch")
install.packages("fGarch")
library("fGarch")
spec = ugarchspec(variance.model = list(model="eGARCH"), mean.model = list(armaOder = c(0,0)))
fit = ugarchfit(data=Y,spec=spec)
fit
spec = ugarchspec(variance.model = list(model="eGARCH"), mean.model = list(armaOrder = c(0,0)))
fit = ugarchfit(data=Y,spec)
fit
help("ugarchspec")
spec = ugarchspec(variance.model = list(model="tGARCH"), mean.model = list(armaOrder = c(0,0)))
fit = ugarchfit(data=Y,spec)
fit
spec = ugarchspec(variance.model = list(model="tGARCH"), mean.model = list(armaOrder = c(0,0)))
fit = ugarchfit(data=Y,spec)
fit
spec2 = ugarchspec(variance.model = list("eGARCH"), mean.model = list(armaOrder = c(0,0))
)
spec2 = ugarchspec(variance.model = list(model ="eGARCH"), mean.model = list(armaOrder = c(0,0)) )
fit = ugarchfit(Y,spec)
hel("ugarchfit")
hel("ugarchFit")
help("ugarchfit")
fit = ugarchfit(spec,Y)
fit
Y
help("ugarchspec")
spec2 = ugarchspec(variance.model = list(model ="eGARCH"), mean.model = list(armaOrder = c(0,0)) )
fit = ugarchfit(data = Y,spec = spec)
fit
spec = ugarchspec(variance.model = list(model="eGARCH"), mean.model = list(armaOrder = c(0,0)))
fit = ugarchfit(data = Y,spec = spec)
fit
egarch.sigma.t = as.vector(sigma(fit)[,1])
res=Y/fit.tgarch@sigma.t
qqnorm(res)
qqline(res, col = "red")
col = rainbow(3)
res=Y/egarch.sigma.t
qqnorm(res)
qqline(res, col = "red")
help(matrox)
help(matrix)
length(egarch.sigma.t)
length(tsgarch@sigma.t)
help("garch")
dim(fitted)
dim(out.garch11$fitted[,1])
length(out.garch11$fitted[,1])
dim(tsgarch@sigma.t)
dim(egarch.sigma.t)
1:2
y = matrix(nrow = 3, ncol = 1000)
y[,1] = out.garch11$fitted[,1]
y[,1]
y[1,]
y[1,] = out.garch11$fitted
y = matrix(0, nrow = 3, ncol = 1000)
dim(y)
dim(out.garch11$fitted[1,])
length(out.garch11$fitted[1,])
length(out.garch11$fitted[,1])
y[1,] = out.garch11$fitted[,1]
y[1,] = out.garch11$fitted[,1]
y[2,] = tsgarch@sigma.t
y[3,] = egarch.sigma.t
help("ugarchspec")
tgarch = garchFit(~garch(1,1), delta = 1, leverage = T, data = Y, trace = F, include.mean = F )
summary(tgarch)
res=Y/tgarch@sigma.t
qqnorm(res)
qqline(res, col = "red")
y[2,] = tgarch@sigma.t # TGARCH(1,1)
col = rainbow(3)
title = c("GARCH(1,1)","Treshold-GARCH(1,1)","Exponential-GARCH(1,1)")
title[1]
sigt = matrix(0, nrow = 3, ncol = 1000)
sigt[1,] = out.garch11$fitted[,1] # GARCH(1,1)
sigt[2,] = tgarch@sigma.t # TGARCH(1,1)
sigt[3,] = egarch.sigma.t # EGARCH(1,1)
col = rainbow(3)
model = c("GARCH(1,1)","Treshold-GARCH(1,1)","Exponential-GARCH(1,1)")
plot.sigt = function(y,sigt,model, c){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
for (i in 1:3) {
lines(sigt[i,],col=c[i])
lines(-sigt[i,],col=c[i])
title(model[i])
}
}
plot.sigt(Y,sigt,model,col)
plot.sigt = function(y,sigt,model, c){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
for (i in 1:3) {
lines(sigt[i,],col=c[i])
lines(-sigt[i,],col=c[i])
#title(model[i])
}
title("Comparing different GARCH models")
}
plot.sigt = function(y,sigt,c){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
for (i in 1:3) {
lines(sigt[i,],col=c[i])
lines(-sigt[i,],col=c[i])
#title(model[i])
}
title("Comparing different GARCH models")
}
plot.sigt(Y,sigt,col)
op = par(cex=0.7)
legend(700,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
op = par(cex=0.7)
legend(650,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
plot.sigt(Y,sigt,col)
op = par(cex=0.7)
legend(650,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
plot.sigt = function(y,sigt,c){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
for (i in 1:3) {
lines(sigt[i,],col=c[i])
lines(-sigt[i,],col=c[i])
}
title("Comparing Var(Yt|Yt-1) for different GARCH models")
}
sigt = matrix(0, nrow = 3, ncol = 1000)
sigt[1,] = out.garch11$fitted[,1] # GARCH(1,1)
sigt[2,] = tgarch@sigma.t # TGARCH(1,1)
sigt[3,] = egarch.sigma.t # EGARCH(1,1)
col = rainbow(3)
plot.sigt(Y,sigt,col)
op = par(cex=0.7)
legend(650,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
plot.sigt = function(y,sigt,c){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
for (i in 1:3) {
lines(sigt[i,],col=c[i])
lines(-sigt[i,],col=c[i])
}
title("Comparing SD(Yt|Yt-1) for different GARCH models")
}
sigt = matrix(0, nrow = 3, ncol = 1000)
sigt[1,] = out.garch11$fitted[,1] # GARCH(1,1)
sigt[2,] = tgarch@sigma.t # TGARCH(1,1)
sigt[3,] = egarch.sigma.t # EGARCH(1,1)
col = rainbow(3)
plot.sigt(Y,sigt,col)
op = par(cex=0.7)
legend(650,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
0.0001
0.005
Box.test(res3,lag=10)
res3=Y/egarch.sigma.t
qqnorm(res3)
qqline(res3, col = "red")
# Ljung-Box Test
Box.test(res3,lag=10)
Box.test(res3,lag=15)
Box.test(res3,lag=20)
jarque.bera.test(res3)
jarque.bera.test(res)
install.packages("tseries")
library(tseries)
library(tseries)
jarque.bera.test(res)
jarque.bera.test(res3)
Box.test(re3s^2,lag=10)
Box.test(res3^2,lag=15)
Box.test(res3^2,lag=20)
Box.test(res3^2,lag=10)
Box.test(res^2,lag=1)
Box.test(res^2,lag=1)
Box.test(res^2,lag=2)
Box.test(res^2,lag=3)
Box.test(res3^2,lag=1)
Box.test(res3^2,lag=2)
Box.test(res3^2,lag=3)
Box.test(res3^2,lag=4)
Box.test(res3^2,lag=5)
Box.test(res3^2,lag=10)
Box.test(res3^2,lag=20)
plot.sigt(Y,sigt,col)
op = par(cex=0.7)
legend(650,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
library(tseries)
source("FTSe.R")
n=length(FTSE) # 2000
X=log(FTSE[(n+1-1000):n]/FTSE[(n-1000):(n-1)]) # last 1000 log returns
# (length(X) = 1000)
# we estimate mu by the sample mean of the 1000 most recent log returns (X)
mu=mean(X) # -8.009957e-05
# Xt = mu + Yt => Yt = Xt - mu
Y=X-mu
out.garch11=garch(Y,order=c(1,1))
help(garch)
omega = out.garch11$coef[1] # 2.478413e-06
alpha1 = out.garch11$coef[2] # 0.1271763
beta1 = out.garch11$coef[3]  # 0.8694462
#(b)
# Computing residuals
res=Y/out.garch11$fitted[,1]
qqnorm(res)
qqline(res, col = "red")
sigsq = omega + alpha1*(Y[1000]^2) + beta1*(out.garch11$fitted[1000,1]^2)
# 8.346525e-05
alpha = c(0.1,0.01)
x_alpha = qnorm(alpha) # alpha quantile of standard normal distribution
VaR = 1000*(1 - exp(mu + x_alpha*sqrt(sigsq)))
VaR
# 11.71906 21.10751
# (d)
# Cross-validation
#
Xfull=log(FTSE[2:n]/FTSE[1:(n-1)])
# log returns for full data set.
N=length(Xfull) # 1999
m=1000
I=rep(0,1000)
alpha=0.1
# alpha=0.01
for(i in 1:(N-m))
{
Xrnew=Xfull[i:(m +i-1)] ##data to use at step i of CV
mu=mean(Xrnew)
Ynew=Xrnew-mu
out.garch1=garch(Ynew,order=c(1,1))
sigsq = out.garch11$coef[1] + out.garch11$coef[2]*(Ynew[m]^2) + out.garch11$coef[3]*(out.garch11$fitted[m,1]^2)
x_alpha=qnorm(alpha) ##alpha quantile
VaR=1000*(1-exp(mu+x_alpha*sqrt(sigsq)))
I[i]=(1000*(1-exp(Xfull[m+i]))>VaR)
}
sum(I)/(N-m)
# VaR(0.1) = 0.1521522 or 15.22 %
# Var(0.01) = 0.05905906or 5.91 %
#Discuss the appropriateness of the GARCH(1,1) model assumptions for the FTSE100
# data. Are there any issues to deal with concerning violations of the GARCH
# assumptions ?
VaR
sum(I)/(N-m)
ts.plot(FTSE[1000:1999])
help("ts.plot")
ts.plot(FTSE[1000:1999])
ts.plot(X)
ts.plot(FTSE[1000:1999])
ts.plot(X)
acf(X)
pacf(X)
acf(X^2)
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
install.packages("fGarch")
library("fGarch")
install.packages("fGarch")
install.packages("fGarch")
library("fGarch")
install.packages("rugarch")
install.packages("rugarch")
install.packages("rugarch")
install.packages("rugarch")
install.packages("rugarch")
install.packages("rugarch")
install.packages("rugarch")
install.packages("rugarch")
install.packages("rugarch")
library("rugarch")
tgarch = garchFit(~garch(1,1), delta = 1, leverage = T, data = Y, trace = F, include.mean = F )
summary(tgarch)
res=Y/tgarch@sigma.t
qqnorm(res)
qqline(res, col = "red")
spec = ugarchspec(variance.model = list(model="eGARCH"), mean.model = list(armaOrder = c(0,0)))
fit = ugarchfit(data = Y,spec = spec)
fit
egarch.sigma.t = as.vector(sigma(fit)[,1])
# QQplot of residulas
res3=Y/egarch.sigma.t
qqnorm(res3)
qqline(res3, col = "red")
Box.test(res3,lag=10,"Ljung")
Box.test(res,lag=15,"Ljung")
res=Y/out.garch11$fitted[,1]
Box.test(res,lag=15,"Ljung")
Box.test(res,lag=15,"Ljung")
Box.test(res,lag=2,"Ljung")
Box.test(res,lag=15,"Ljung")
Box.test(res,lag=10,"Ljung")
Box.test(res,lag=15,"Ljung")
Box.test(res,lag=20, "Ljung")
Box.test(res^2,lag=10, "Ljung")
Box.test(res^2,lag=15, "Ljung")
Box.test(res^2,lag=20, "Ljung")
jarque.bera.test(res)
install.packages("tseries")
library(tseries)
library(tseries)
jarque.bera.test(res)
jarque.bera.test(res[2:1000])
res3=Y/egarch.sigma.t
qqnorm(res3)
qqline(res3, col = "red")
Box.test(res3,lag=10,"Ljung")
Box.test(res3,lag=15, "Ljung")
Box.test(res3,lag=20, "Ljung")
jarque.bera.test(res3)
Box.test(res3^2,lag=10, "Ljung")
Box.test(res3^2,lag=15, "Ljung")
Box.test(res3^2,lag=20, "Ljung")
help("ugarchspec")
spec = ugarchspec(variance.model = list(model="eGARCH"), mean.model = list(armaOrder = c(0,0), include.mean = FALSE))
fit = ugarchfit(data = Y,spec = spec)
fit
egarch.sigma.t = as.vector(sigma(fit)[,1])
res3=Y/egarch.sigma.t
qqnorm(res3)
qqline(res3, col = "red")
Box.test(res3,lag=10,"Ljung")
Box.test(res3,lag=15, "Ljung")
Box.test(res3,lag=20, "Ljung")
Box.test(res3^2,lag=10, "Ljung")
Box.test(res3^2,lag=15, "Ljung")
# Box-Ljung test
# data:  res3^2
# X-squared = 48.277, df = 15, p-value = 2.294e-05
Box.test(res3^2,lag=20, "Ljung")
jarque.bera.test(res3)
plot.sigt = function(y,sigt,c){
limy = range(abs(y),-abs(y))
par(mfrow=c(1,1))
plot(abs(y),xlab="Days",ylab="Log-returns (-/+)",main="",type="h",axes=FALSE,ylim=limy)
lines(-abs(y), type="h")
axis(2);box();axis(1,at = c(0,200,400,600, 800, 1000))
for (i in 1:3) {
lines(sigt[i,],col=c[i])
lines(-sigt[i,],col=c[i])
}
title("Comparing SD(Yt|Yt-1) for different GARCH models")
}
sigt = matrix(0, nrow = 3, ncol = 1000)
sigt[1,] = out.garch11$fitted[,1] # GARCH(1,1)
sigt[2,] = tgarch@sigma.t # TGARCH(1,1)
sigt[3,] = egarch.sigma.t # EGARCH(1,1)
col = rainbow(3)
plot.sigt(Y,sigt,col)
op = par(cex=0.7)
legend(650,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
MSE_garch = mean(sigt[1,])
MSE_garch
sig1 = out.garch11$fitted[,1]
sig1[1]
MSE_garch = mean(sig1[2:1000])
MSE_garch
MSE_garch = sqrt(mean((sig1[2:1000])^2))
MSE_garch
res=Y/tgarch@sigma.t
qqnorm(res)
qqline(res, col = "red")
res=Y/tgarch@sigma.t
Box.test(res^2,lag=5, "Ljung")
sigt = matrix(0, nrow = 3, ncol = 1000)
sigt[1,] = out.garch11$fitted[,1] # GARCH(1,1)
sigt[2,] = tgarch@sigma.t # TGARCH(1,1)
sigt[3,] = egarch.sigma.t # EGARCH(1,1)
col = rainbow(3)
plot.sigt(Y,sigt,col)
op = par(cex=0.7)
legend(650,-0.05,legend = c("GARCH(1,1)","TGARCH(1,1)","EGARCH(1,1)"),col = col, lty = 1)
signature(fit)
spec = ugarchspec(variance.model = list(model="eGARCH"), mean.model = list(armaOrder = c(0,0), include.mean = FALSE))
fit = ugarchfit(data = Y,spec = spec)
signature(fit)
coef(fit)
tgarch = garchFit(~garch(1,1), delta = 1, leverage = T, data = Y, trace = F, include.mean = F )
summary(tgarch)
coef(tgarch)
